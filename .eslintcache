[{"/Users/andrew.b.truong/Development/mywizard-type/src/App.js":"1","/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js":"2","/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js":"3","/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js":"4","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx":"5","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx":"6","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx":"7","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx":"8","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx":"9","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx":"10","/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js":"11","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx":"12","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx":"13","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx":"14","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timer/timer.component.jsx":"15","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialModeContext.jsx":"16","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/wordContext.jsx":"17","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/sfwModeContext.jsx":"18","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialStateContext.jsx":"19","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/timerContext.jsx":"20","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timeButton/timeButton.component.jsx":"21","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/modal/resultModal.component.jsx":"22","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/modal/resultModal.styled.jsx":"23","/Users/andrew.b.truong/Development/a-dull-boy-types/src/globalStyles.jsx":"24"},{"size":1446,"mtime":1612159636248,"results":"25","hashOfConfig":"26"},{"size":500,"mtime":1613028098852,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1612161487345,"results":"29","hashOfConfig":"28"},{"size":2375,"mtime":1615121310721,"results":"30","hashOfConfig":"28"},{"size":385,"mtime":1612161902680,"results":"31","hashOfConfig":"28"},{"size":5400,"mtime":1615121309716,"results":"32","hashOfConfig":"28"},{"size":310,"mtime":1612161902680,"results":"33","hashOfConfig":"28"},{"size":303,"mtime":1612161902681,"results":"34","hashOfConfig":"28"},{"size":169,"mtime":1612407401564,"results":"35","hashOfConfig":"28"},{"size":2162,"mtime":1614887342716,"results":"36","hashOfConfig":"28"},{"size":54,"mtime":1612412464784,"results":"37","hashOfConfig":"28"},{"size":182,"mtime":1615087342315,"results":"38","hashOfConfig":"28"},{"size":382,"mtime":1612468923516,"results":"39","hashOfConfig":"28"},{"size":210,"mtime":1613979726131,"results":"40","hashOfConfig":"28"},{"size":794,"mtime":1614893080655,"results":"41","hashOfConfig":"28"},{"size":355,"mtime":1614901805726,"results":"42","hashOfConfig":"28"},{"size":594,"mtime":1614424313189,"results":"43","hashOfConfig":"28"},{"size":329,"mtime":1614893080656,"results":"44","hashOfConfig":"28"},{"size":1587,"mtime":1615009908289,"results":"45","hashOfConfig":"28"},{"size":322,"mtime":1614893080657,"results":"46","hashOfConfig":"28"},{"size":526,"mtime":1615009908287,"results":"47","hashOfConfig":"28"},{"size":1612,"mtime":1615153667592,"results":"48","hashOfConfig":"28"},{"size":1496,"mtime":1615093991035,"results":"49","hashOfConfig":"28"},{"size":171,"mtime":1615121017341,"results":"50","hashOfConfig":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1e1tsek",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1thy0cg",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/andrew.b.truong/Development/mywizard-type/src/App.js",["105"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js",[],["106","107"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx",["108","109","110"],"import React, { useState, useContext } from \"react\";\nimport '../../App.css';\nimport { InitialStateContext } from '../../context/initialStateContext';\nimport Timer from '../../components/timer/timer.component';\nimport { generateWord } from '../../components/wordGenerator/wordGenerator.component';\nimport { generateNaughtyWord } from '../../components/wordGenerator/badWordGenerator.component';\nimport useKeyPress from '../../hooks/useKeyPress';\nimport { currentTime } from '../../utils/time';\nimport { TimerContext } from \"../../context/timerContext\";\nimport { InitialModeContext } from '../../context/initialModeContext';\nimport TimeButton from '../../components/timeButton/timeButton.component';\nimport { ResultModal } from '../../components/modal/resultModal.component';\nimport  { StyledContainer } from '../../components/modal/resultModal.styled';\nimport { StyledButton } from '../../components/modal/resultModal.styled';\n\nfunction HomePage() {\n\n  //modal state\n  const [showModal, setShowModal] = useState(false);\n\n  //overall global state \n  const {state, dispatch} = useContext(InitialStateContext); \n\n  const [isStarted, setIsStarted] = useContext(InitialModeContext);\n\n  //Time counter context \n  const [counter, setCounter] = useContext(TimerContext);\n\n  //tracking typing accuracy\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n\n  //tracking WPM, word count, time\n  const [startTime, setStartTime] = useState(); \n  const [wordCount, setWordCount] = useState(0);\n  const [wpm, setWpm] = useState(0); \n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(20).fill(' ').join('')\n  );\n\n  const [outgoingChars, setOutgoingChars] = useState(''); \n  //first letter of the first word\n  const [currentChar, setCurrentChar] = useState(state.initialValue.charAt(0)); \n  //string of words/characters excluding the first character \n  const [incomingChars, setIncomingChars] = useState(state.initialValue.substr(1)); \n\n  function changeNSFWMode(event) {\n    dispatch({type: 'NSFW'})\n    setIncomingChars(state.initialValue.substr(1))\n    setCurrentChar(state.initialValue.charAt(0))\n    setOutgoingChars('')\n    setIsStarted(\"redo\")\n    event.target.blur()\n  }\n\n  function changeNormalMode(event) {\n    dispatch({type: 'REDO'})\n    setIncomingChars(state.initialValue.substr(1))\n    setCurrentChar(state.initialValue.charAt(0))\n    setOutgoingChars('')\n    setIsStarted(\"redo\")\n    event.target.blur()\n  }\n\n  const openModal = () => {\n    setShowModal(prev => !prev);\n    console.log(\"modal clicked\")\n  }\n  useKeyPress(key => {\n    console.log(\"state of counter\", state.isStarted)\n    if (state.isStarted === false) {\n      state.isStarted = true;\n    }\n\n    if (!startTime) {\n      setStartTime(currentTime());\n      console.log('time', currentTime());\n    }\n\n    console.log(key)\n    let updatedOutgoingChars = outgoingChars; \n    let updatedIncomingChars = incomingChars; \n\n    //if key pressed matches the current character\n    if (key === currentChar) {\n\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1)); \n      }\n      updatedOutgoingChars += currentChar; \n      setOutgoingChars(updatedOutgoingChars)\n\n      //set the current character to the value of the next incoming character\n      setCurrentChar(incomingChars.charAt(0)); \n\n      /*\n      Since generateWord() method only creates 10 words per call\n      In the instance, the user types too fast, we want to generate more words\n      and append it to the incoming chars. \n      */\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split('').length < 20) {\n        if (state.sfwMode === true){\n          updatedIncomingChars += ' ' + generateWord();\n        } \n        else if(state.sfwMode === false) {\n            updatedIncomingChars += ' ' + generateNaughtyWord();\n        }\n      }\n      setIncomingChars(updatedIncomingChars);\n      \n      /*\n      if the next character is a empty space, it means the user has successfully\n      typed a full word, increment the wordCount by 1 \n      */\n      if (incomingChars.charAt(0) === ' '){\n        setWordCount(wordCount + 1);\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n      }\n    }\n\n      const updatedTypedChars = typedChars + key;\n      setTypedChars(updatedTypedChars);\n      setAccuracy(\n        ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\n          2,\n        ),\n      );\n  });\n\n  \n  \n  return (\n    <div className=\"App\">\n      <div className=\"Character\">\n      <h2>{state.title}</h2>\n      <Timer />\n      <span className=\"Character-out\"> \n        {(leftPadding + outgoingChars).slice(-20)}\n      </span>\n      <span className=\"Character-current\">{currentChar}</span>\n      <span>{incomingChars.substr(0,20)}</span>\n      </div>\n    <h3 className=\"Character\"> \n      WPM: {wpm} | Accuracy: {accuracy}%\n    </h3>\n    <span>\n      <button onClick={changeNSFWMode} tabIndex=\"-1\">NSFW Mode</button>\n      <button onClick={changeNormalMode}>REDO</button>\n      <TimeButton tabIndex=\"-1\"/>\n    </span>\n    <StyledContainer>\n      <StyledButton onClick={openModal}>I'm a Modal</StyledButton>\n      <ResultModal showModal={showModal} setShowModal={setShowModal} />\n    </StyledContainer>\n  </div>\n\n  );\n};\n\nexport default HomePage;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx",["111","112","113"],"import { useState, useEffect, useContext } from 'react'; \nimport { InitialModeContext } from '../context/initialModeContext';\n\nconst useKeyPress = callback => {\n  var tabPressed = false\n  var enterPressed = false\n\n  /* \n  useState hook is used here so whenever the user pressed a key, we will trigger the setter function, 'setKeyPressed'\n  we will also track the current key being pressed by storing it in, 'keyPressed'\n  */\n\n  const [keyPressed, setKeyPressed] = useState();\n  const [isStarted, setIsStarted] = useContext(InitialModeContext); \n\n  useEffect(() => {\n    const downHandler = ({ key }) => {\n\n      /* \n      console.log(key.length)\n      The way we can differentiate an 'alphabet or numeric button' press vs 'shift, ctrl, enter etc.' \n      is by tracking the key.length value. \n      Alphabet and numeric buttons will output key.length values == 1\n      Compared to ctrl, shift etc => 1\n      */\n      if (keyPressed !== key && key.length ===1){\n        // console.log(key, key.length)\n        setIsStarted(true); \n        setKeyPressed(key);\n        callback && callback(key)\n      }\n      \n      if (key === 'Tab') {\n        tabPressed = true;\n        console.log('tabPressed', tabPressed)\n      }\n      if (key === 'Enter'){\n        enterPressed = true;\n        console.log('enterPressed', enterPressed)\n      }\n\n      if (tabPressed === true && enterPressed === true){\n        console.log('both tab and enter key pressed')\n      }\n    };\n\n    const upHandler = ({key}) => {\n      setKeyPressed(null); \n      if (key === 'Tab') {\n        tabPressed = false;\n      }\n      if (key === 'Enter'){\n        enterPressed = false;\n      }\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    /* \n    in the return statement we want to add the removeEventListener function \n    to ensure that anytime an EventListener is added, it is also removed to \n    avoid slowing down the app.  \n    */\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress; ","/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx",[],["114","115"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timer/timer.component.jsx",["116"],"import React, { useState, useEffect, useContext } from 'react'; \nimport { InitialModeContext } from '../../context/initialModeContext';\n\nconst Timer = () => {\n\n  const [counter, setCounter] = useState('60');\n  const [isStarted, setIsStarted] = useContext(InitialModeContext);\n\n  useEffect(() => {\n\n    if (isStarted === true ){\n      counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n    }\n  }, [counter, isStarted]);\n\n  return(\n    <div> \n      <h1> {counter} </h1>\n    </div>\n  )\n}\n\nexport default Timer;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/wordContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/sfwModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialStateContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/timerContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timeButton/timeButton.component.jsx",["117","118","119"],"import React, { useContext } from 'react';\nimport {TimerContext } from '../../context/timerContext';\nimport { InitialModeContext } from '../../context//initialModeContext';\n\nconst TimeButton = () => { \n\n  const [counter, setCounter] = useContext(TimerContext);\n  const [isStarted, setIsStarted] = useContext(InitialModeContext);\n\n  function changeTestTime(event) { \n    setIsStarted(\"CHANGE\")\n    event.target.blur()\n  }\n\n  return(\n    <button onClick={changeTestTime}>\n      15\n    </button>\n  )\n}\n\nexport default TimeButton;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/modal/resultModal.component.jsx",["120"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/modal/resultModal.styled.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/globalStyles.jsx",[],{"ruleId":"121","severity":1,"message":"122","line":13,"column":8,"nodeType":"123","messageId":"124","endLine":13,"endColumn":19},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":24,"column":10,"nodeType":"123","messageId":"124","endLine":24,"endColumn":19},{"ruleId":"121","severity":1,"message":"130","line":27,"column":10,"nodeType":"123","messageId":"124","endLine":27,"endColumn":17},{"ruleId":"121","severity":1,"message":"131","line":27,"column":19,"nodeType":"123","messageId":"124","endLine":27,"endColumn":29},{"ruleId":"121","severity":1,"message":"129","line":14,"column":10,"nodeType":"123","messageId":"124","endLine":14,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":34,"column":22,"nodeType":"134","endLine":34,"endColumn":26},{"ruleId":"132","severity":1,"message":"135","line":38,"column":24,"nodeType":"134","endLine":38,"endColumn":28},{"ruleId":"125","replacedBy":"136"},{"ruleId":"127","replacedBy":"137"},{"ruleId":"121","severity":1,"message":"138","line":9,"column":21,"nodeType":"123","messageId":"124","endLine":9,"endColumn":33},{"ruleId":"121","severity":1,"message":"130","line":7,"column":10,"nodeType":"123","messageId":"124","endLine":7,"endColumn":17},{"ruleId":"121","severity":1,"message":"131","line":7,"column":19,"nodeType":"123","messageId":"124","endLine":7,"endColumn":29},{"ruleId":"121","severity":1,"message":"129","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":19},{"ruleId":"121","severity":1,"message":"139","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":14},"no-unused-vars","'Leaderboard' is defined but never used.","Identifier","unusedVar","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'isStarted' is assigned a value but never used.","'counter' is assigned a value but never used.","'setCounter' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'tabPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'enterPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["140"],["141"],"'setIsStarted' is assigned a value but never used.","'styled' is defined but never used.","no-global-assign","no-unsafe-negation"]