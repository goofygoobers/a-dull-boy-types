[{"/Users/andrew.b.truong/Development/mywizard-type/src/App.js":"1","/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js":"2","/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js":"3","/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js":"4","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx":"5","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx":"6","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx":"7","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx":"8","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx":"9","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx":"10","/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js":"11","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx":"12","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx":"13","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/nsfwButton/nsfwButton.component.jsx":"14","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx":"15","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialWordContext.js":"16","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timer/timer.component.jsx":"17","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialModeContext.jsx":"18","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/nsfwModeContext.jsx":"19","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/sfwModeContext.jsx":"20","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/wordContext.jsx":"21"},{"size":1446,"mtime":1612159636248,"results":"22","hashOfConfig":"23"},{"size":500,"mtime":1613028098852,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1612161487345,"results":"26","hashOfConfig":"25"},{"size":2584,"mtime":1614423070919,"results":"27","hashOfConfig":"25"},{"size":385,"mtime":1612161902680,"results":"28","hashOfConfig":"25"},{"size":5715,"mtime":1614423070921,"results":"29","hashOfConfig":"25"},{"size":310,"mtime":1612161902680,"results":"30","hashOfConfig":"25"},{"size":303,"mtime":1612161902681,"results":"31","hashOfConfig":"25"},{"size":169,"mtime":1612407401564,"results":"32","hashOfConfig":"25"},{"size":2162,"mtime":1613980613529,"results":"33","hashOfConfig":"25"},{"size":54,"mtime":1612412464784,"results":"34","hashOfConfig":"25"},{"size":180,"mtime":1613429573679,"results":"35","hashOfConfig":"25"},{"size":382,"mtime":1612468923516,"results":"36","hashOfConfig":"25"},{"size":1576,"mtime":1614423070919,"results":"37","hashOfConfig":"25"},{"size":210,"mtime":1613979726131,"results":"38","hashOfConfig":"25"},{"size":95,"mtime":1614403964336,"results":"39","hashOfConfig":"25"},{"size":520,"mtime":1614026407551,"results":"40","hashOfConfig":"25"},{"size":355,"mtime":1613980108511,"results":"41","hashOfConfig":"25"},{"size":92,"mtime":1614026774465,"results":"42","hashOfConfig":"25"},{"size":328,"mtime":1614027502169,"results":"43","hashOfConfig":"25"},{"size":469,"mtime":1614423070920,"results":"44","hashOfConfig":"25"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1e1tsek",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1thy0cg",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/andrew.b.truong/Development/mywizard-type/src/App.js",["93"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js",[],["94","95"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js",["96"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx",["97","98","99"],"import React, { useState, useContext } from \"react\";\nimport '../../App.css';\n\nimport { SfwModeContext } from '../../context/sfwModeContext';\nimport { InitialWordContext } from '../../hooks/initialWordContext';\nimport { WordContext } from '../../context/wordContext';\nimport Timer from '../../components/timer/timer.component';\nimport { generateWord } from '../../components/wordGenerator/wordGenerator.component';\nimport { generateNaughtyWord } from '../../components/wordGenerator/badWordGenerator.component';\nimport useKeyPress from '../../hooks/useKeyPress';\n// import NsfwButton from '../../components/nsfwButton/nsfwButton.component';\n// import  RedoButton  from '../../components/redoButton/redoButton.component';\nimport { currentTime } from '../../utils/time';\n\n\nfunction HomePage() {\n\n  //NSFW Mode\n  const [sfwMode, setSfwMode] = useContext(SfwModeContext); \n  console.log(\"what mode are we in??context\", sfwMode)\n\n  //initial words\n  // var {initialValue, setInitialValue} = useContext(WordContext)\n  var {initialValue, setInitialValue} = useContext(InitialWordContext)\n  if (initialValue === undefined){\n   throw new Error('context value is undefined') \n  }\n\n  const [title, setTitle] = useState(\"Keyboard Warriors\")\n  // console.log(\"title name:\", title)\n\n  //tracking typing accuracy\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n\n  //tracking WPM, word count, time\n  const [startTime, setStartTime] = useState(); \n  const [wordCount, setWordCount] = useState(0);\n  const [wpm, setWpm] = useState(0); \n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(20).fill(' ').join('')\n  );\n\n  const [outgoingChars, setOutgoingChars] = useState(''); \n  //first letter of the first word\n  const [currentChar, setCurrentChar] = useState(initialValue.charAt(0)); \n  //string of words/characters excluding the first character \n  const [incomingChars, setIncomingChars] = useState(initialValue.substr(1)); \n\n  function resetApp() {\n    console.log(\"resetting app\");\n    setInitialValue(generateWord());\n    setOutgoingChars('');\n    setCurrentChar(initialValue.charAt(0));\n    setIncomingChars(initialValue.substr(1));\n  }\n\n\n  function changeTypingMode(event) { \n    setSfwMode(!sfwMode)\n\n    if (sfwMode === true){\n      setInitialValue(generateNaughtyWord());\n      setTitle(\"Toxic Warriors\");\n      setIncomingChars(initialValue.substr(1))\n      console.log(\"sfwMode111true new intialvalue\", initialValue)\n      setCurrentChar(initialValue.charAt(0))\n      event.target.blur(); \n    }\n    else if (sfwMode === false){\n      setInitialValue(generateWord());\n      setTitle(\"Keyboard Warriors\");\n      setIncomingChars(initialValue.substr(1))\n      console.log(\"sfwMode111false new initialvalue\", initialValue)\n      setCurrentChar(initialValue.charAt(0))\n      event.target.blur(); \n    }\n  }\n\n  useKeyPress(key => {\n\n    if (!startTime) {\n      setStartTime(currentTime());\n      console.log('time', currentTime());\n    }\n\n    console.log(key)\n    let updatedOutgoingChars = outgoingChars; \n    let updatedIncomingChars = incomingChars; \n\n    //if key pressed matches the current character\n    if (key === currentChar) {\n\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1)); \n      }\n      updatedOutgoingChars += currentChar; \n      setOutgoingChars(updatedOutgoingChars)\n\n      //set the current character to the value of the next incoming character\n      setCurrentChar(incomingChars.charAt(0)); \n\n      /*\n      Since generateWord() method only creates 10 words per call\n      In the instance, the user types too fast, we want to generate more words\n      and append it to the incoming chars. \n      */\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split('').length < 20) {\n        if (sfwMode === true){\n          updatedIncomingChars += ' ' + generateWord();\n          console.log(\"Geneartion - what mode are we in? \", sfwMode)\n          console.log(\"generating good words!!!\")\n        } \n        else if(sfwMode === false) {\n            updatedIncomingChars += ' ' + generateNaughtyWord();\n            console.log(\"Generation - what mode are we in? \", sfwMode)\n            console.log(\"generating BAD words!!\")\n        }\n      }\n      setIncomingChars(updatedIncomingChars);\n      \n      /*\n      if the next character is a empty space, it means the user has successfully\n      typed a full word, increment the wordCount by 1 \n      */\n      if (incomingChars.charAt(0) === ' '){\n        setWordCount(wordCount + 1);\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\n        console.log('minutes', durationInMinutes);\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n      }\n    }\n\n      const updatedTypedChars = typedChars + key;\n      setTypedChars(updatedTypedChars);\n      setAccuracy(\n        ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\n          2,\n        ),\n      );\n  });\n  \n  return (\n    <div className=\"App\">\n      <div className=\"Character\">\n      <h2>Keyboard Warriors</h2>\n      <Timer />\n      <span className=\"Character-out\"> \n        {(leftPadding + outgoingChars).slice(-20)}\n      </span>\n      <span className=\"Character-current\">{currentChar}</span>\n      <span>{incomingChars.substr(0,20)}</span>\n      </div>\n    <h3 className=\"Character\"> \n      WPM: {wpm} | Accuracy: {accuracy}%\n    </h3>\n    <span>\n      <button onClick={changeTypingMode}>FORTNITE Mode</button>\n    </span>\n    {/* <NsfwButton /> */}\n    {/* <span>\n      <RedoButton onClick={resetApp}/>\n    </span> */}\n    {/* <div> \n      {initialValue}\n    </div> */}\n  </div>\n\n  );\n};\n\nexport default HomePage;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx",["100","101","102"],"import { useState, useEffect, useContext } from 'react'; \nimport { InitialModeContext } from '../context/initialModeContext';\n\nconst useKeyPress = callback => {\n  var tabPressed = false\n  var enterPressed = false\n\n  /* \n  useState hook is used here so whenever the user pressed a key, we will trigger the setter function, 'setKeyPressed'\n  we will also track the current key being pressed by storing it in, 'keyPressed'\n  */\n\n  const [keyPressed, setKeyPressed] = useState();\n  const [isStarted, setIsStarted] = useContext(InitialModeContext); \n\n  useEffect(() => {\n    const downHandler = ({ key }) => {\n\n      /* \n      console.log(key.length)\n      The way we can differentiate an 'alphabet or numeric button' press vs 'shift, ctrl, enter etc.' \n      is by tracking the key.length value. \n      Alphabet and numeric buttons will output key.length values == 1\n      Compared to ctrl, shift etc => 1\n      */\n      if (keyPressed !== key && key.length ===1){\n        // console.log(key, key.length)\n        setIsStarted(true); \n        setKeyPressed(key);\n        callback && callback(key)\n      }\n      \n      if (key === 'Tab') {\n        tabPressed = true;\n        console.log('tabPressed', tabPressed)\n      }\n      if (key === 'Enter'){\n        enterPressed = true;\n        console.log('enterPressed', enterPressed)\n      }\n\n      if (tabPressed === true && enterPressed === true){\n        console.log('both tab and enter key pressed')\n      }\n    };\n\n    const upHandler = ({key}) => {\n      setKeyPressed(null); \n      if (key === 'Tab') {\n        tabPressed = false;\n      }\n      if (key === 'Enter'){\n        enterPressed = false;\n      }\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    /* \n    in the return statement we want to add the removeEventListener function \n    to ensure that anytime an EventListener is added, it is also removed to \n    avoid slowing down the app.  \n    */\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n\n  return keyPressed;\n};\n\nexport default useKeyPress; ","/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/nsfwButton/nsfwButton.component.jsx",["103","104","105","106"],"import React, { useRef, useEffect, useState, useContext } from 'react'; \nimport { generateWord } from '../../components/wordGenerator/wordGenerator.component';\nimport { generateNaughtyWord } from '../../components/wordGenerator/badWordGenerator.component';\nimport { WordContext } from '../../context/wordContext';\nimport { SfwModeContext } from '../../context/sfwModeContext';\n\nconst NsfwButton = () => { \n\n  // const [sfwMode, setSfwMode] = useState(false); \n  const [sfwMode, setSfwMode] = useContext(SfwModeContext); \n  var [initialValue, setInitialValue] = useContext(WordContext);\n  // var initialWord = useRef('')\n  \n  useEffect(() => {\n\n    if (sfwMode === true){\n      setInitialValue = generateWord();\n      // initialWord.current= generateWord();\n      // console.log(\"111safe words = \", initialWord.current)\n      // console.log(\"111safe word type\", typeof initialWord.current)\n      // console.log(\"111charAt test: \", initialWord.charAt(0))\n\n    }\n    else {\n      setInitialValue= generateNaughtyWord();\n\n      // console.log(\"222bad words = \", initialWord.current)\n      // console.log(\"222bad word type\", typeof initialWord.current)\n      // console.log(\"222charAt test: \", initialWord.charAt(0))\n\n    }\n  }, [sfwMode])\n\n  function changeTypingMode() { \n    setSfwMode(!sfwMode)\n    console.log('sfw mode: ',sfwMode)\n  }\n\n  return(\n    <div>\n      <button onClick={changeTypingMode}> NSFW </button>\n      <div>\n        <h2 style={{backgroundColor: \"yellow\", color: \"black\"}}> {initialValue} </h2>\n      </div>\n    </div>\n\n  )\n};\n\nexport default NsfwButton; \n\n","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx",[],["107","108"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialWordContext.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/timer/timer.component.jsx",["109"],"import React, { useState, useEffect, useContext } from 'react'; \nimport { InitialModeContext } from '../../context/initialModeContext';\n\nconst Timer = () => {\n\n  const [counter, setCounter] = useState('60');\n  const [isStarted, setIsStarted] = useContext(InitialModeContext);\n\n  useEffect(() => {\n\n    if (isStarted === true ){\n      counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n    }\n  }, [counter, isStarted]);\n\n  return(\n    <div> \n      <h1> {counter} </h1>\n    </div>\n  )\n}\n\nexport default Timer;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/initialModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/nsfwModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/sfwModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/context/wordContext.jsx",[],{"ruleId":"110","severity":1,"message":"111","line":13,"column":8,"nodeType":"112","messageId":"113","endLine":13,"endColumn":19},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"110","severity":1,"message":"118","line":20,"column":10,"nodeType":"112","messageId":"113","endLine":20,"endColumn":22},{"ruleId":"110","severity":1,"message":"119","line":11,"column":8,"nodeType":"112","messageId":"113","endLine":11,"endColumn":18},{"ruleId":"110","severity":1,"message":"120","line":31,"column":10,"nodeType":"112","messageId":"113","endLine":31,"endColumn":15},{"ruleId":"110","severity":1,"message":"121","line":53,"column":12,"nodeType":"112","messageId":"113","endLine":53,"endColumn":20},{"ruleId":"110","severity":1,"message":"122","line":14,"column":10,"nodeType":"112","messageId":"113","endLine":14,"endColumn":19},{"ruleId":"123","severity":1,"message":"124","line":34,"column":22,"nodeType":"125","endLine":34,"endColumn":26},{"ruleId":"123","severity":1,"message":"126","line":38,"column":24,"nodeType":"125","endLine":38,"endColumn":28},{"ruleId":"110","severity":1,"message":"127","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":23},{"ruleId":"110","severity":1,"message":"128","line":1,"column":36,"nodeType":"112","messageId":"113","endLine":1,"endColumn":44},{"ruleId":"123","severity":1,"message":"129","line":17,"column":25,"nodeType":"130","endLine":17,"endColumn":39},{"ruleId":"110","severity":1,"message":"131","line":25,"column":7,"nodeType":"112","messageId":"113","endLine":25,"endColumn":22},{"ruleId":"114","replacedBy":"132"},{"ruleId":"116","replacedBy":"133"},{"ruleId":"110","severity":1,"message":"134","line":7,"column":21,"nodeType":"112","messageId":"113","endLine":7,"endColumn":33},"no-unused-vars","'Leaderboard' is defined but never used.","Identifier","unusedVar","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"'WordProvider' is defined but never used.","'NsfwButton' is defined but never used.","'title' is assigned a value but never used.","'resetApp' is defined but never used.","'isStarted' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'tabPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'enterPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'useRef' is defined but never used.","'useState' is defined but never used.","Assignments to the 'setInitialValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'setInitialValue' is assigned a value but never used.",["135"],["136"],"'setIsStarted' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]