[{"/Users/andrew.b.truong/Development/mywizard-type/src/App.js":"1","/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js":"2","/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js":"3","/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js":"4","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx":"5","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx":"6","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx":"7","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx":"8","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx":"9","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx":"10","/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js":"11","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx":"12","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx":"13","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/nsfwButton/nsfwButton.component.jsx":"14","/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx":"15","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialWordContext.js":"16","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialModeContext.jsx":"17","/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/nsfwModeContext.jsx":"18"},{"size":1446,"mtime":1612159636248,"results":"19","hashOfConfig":"20"},{"size":500,"mtime":1613028098852,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1612161487345,"results":"23","hashOfConfig":"22"},{"size":2245,"mtime":1613026518538,"results":"24","hashOfConfig":"22"},{"size":385,"mtime":1612161902680,"results":"25","hashOfConfig":"22"},{"size":6413,"mtime":1613220627967,"results":"26","hashOfConfig":"22"},{"size":310,"mtime":1612161902680,"results":"27","hashOfConfig":"22"},{"size":303,"mtime":1612161902681,"results":"28","hashOfConfig":"22"},{"size":169,"mtime":1612407401564,"results":"29","hashOfConfig":"22"},{"size":1986,"mtime":1613379128346,"results":"30","hashOfConfig":"22"},{"size":54,"mtime":1612412464784,"results":"31","hashOfConfig":"22"},{"size":180,"mtime":1612463223426,"results":"32","hashOfConfig":"22"},{"size":382,"mtime":1612468923516,"results":"33","hashOfConfig":"22"},{"size":1280,"mtime":1612656585832,"results":"34","hashOfConfig":"22"},{"size":210,"mtime":1613079197138,"results":"35","hashOfConfig":"22"},{"size":95,"mtime":1613024383439,"results":"36","hashOfConfig":"22"},{"size":803,"mtime":1613024384841,"results":"37","hashOfConfig":"22"},{"size":92,"mtime":1613024317696,"results":"38","hashOfConfig":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1e1tsek",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1thy0cg",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/andrew.b.truong/Development/mywizard-type/src/App.js",["78"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/index.js",[],["79","80"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/reportWebVitals.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/App.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/account/account.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.component.jsx",["81","82","83"],"import React, { useState, useContext } from \"react\";\nimport '../../App.css';\n\nimport { generateWord } from '../../components/wordGenerator/wordGenerator.component';\nimport { generateNaughtyWord } from '../../components/wordGenerator/badWordGenerator.component';\nimport useKeyPress from '../../hooks/useKeyPress';\n// import NsfwButton from '../../components/nsfwButton/nsfwButton.component';\nimport  RedoButton  from '../../components/redoButton/redoButton.component';\nimport { currentTime } from '../../utils/time';\nimport { InitialWordContext } from '../../hooks/initialWordContext';\n// import { NsfwModeContext } from '../../hooks/nsfwModeContext';\n\n// import { InitialModeContext } from '../../hooks/initialModeContext';\n// import { useModeContext, useModeContextUpdate } from '../../hooks/initialModeContext';\n\nfunction HomePage() {\n\n  //NSFW Mode\n  const [sfwMode, setSfwMode] = useState(true); \n\n  // initialMode\n  // const {initialMode, setInitialMode} = useContext(NsfwModeContext);\n  // console.log(\"initial mode home page\", initialMode)\n\n  //initial words\n  var {initialValue, setInitialValue} = useContext(InitialWordContext)\n  console.log(\"initialValuehomepage:\", initialValue)\n\n  const [title, setTitle] = useState(\"Keyboard Warriors\")\n  // console.log(\"title name:\", title)\n\n  //tracking typing accuracy\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n\n  //tracking WPM, word count, time\n  const [startTime, setStartTime] = useState(); \n  const [wordCount, setWordCount] = useState(0);\n  const [wpm, setWpm] = useState(0); \n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(20).fill(' ').join('')\n  );\n\n  // useEffect(() => {\n\n  //   if (sfwMode === true){\n      \n  //     // nsfwInitialWord.current =generateNaughtyWord();\n  //     initialWordsKey = nsfwInitialWordKey\n  //     console.log(\"69 home initialwordskey value \", initialWordsKey)\n  //     console.log(\"69 home initialwordskey type \", typeof initialWordsKey)\n      \n  //   }\n  //   else if (sfwMode === false) {\n\n  //     // initialWords.current = generateWord();\n  //     initialWordsKey = initialWords.current\n  //     console.log(\"70 home initialwordskey value \", initialWordsKey)\n  //     console.log(\"70 home initialwordskey type \", typeof initialWordsKey)\n      \n  //   }\n  // }, [sfwMode, initialWordsKey])\n\n\n  const [outgoingChars, setOutgoingChars] = useState(''); \n  //first letter of the first word\n  const [currentChar, setCurrentChar] = useState(initialValue.charAt(0)); \n  //string of words/characters excluding the first character \n  const [incomingChars, setIncomingChars] = useState(initialValue.substr(1)); \n\n  function resetApp() {\n    console.log(\"resetting app\");\n    setInitialValue(generateWord());\n    setOutgoingChars('');\n    setCurrentChar(initialValue.charAt(0));\n    setIncomingChars(initialValue.substr(1));\n  }\n\n\n  function changeTypingMode(event) { \n    setSfwMode(!sfwMode)\n    console.log(\"what mode are we in??\", sfwMode)\n    if (sfwMode === true){\n      setInitialValue(generateNaughtyWord());\n      setTitle(\"Toxic Warriors\");\n      setIncomingChars(initialValue.substr(1))\n      console.log(\"sfwMode111true new intialvalue\", initialValue)\n      setCurrentChar(initialValue.charAt(0))\n      event.target.blur(); \n    }\n    else if (sfwMode === false){\n      setInitialValue(generateWord());\n      setTitle(\"Keyboard Warriors\");\n      setIncomingChars(initialValue.substr(1))\n      console.log(\"sfwMode111false new intialvalue\", initialValue)\n      setCurrentChar(initialValue.charAt(0))\n      event.target.blur(); \n    }\n\n  }\n\n  useKeyPress(key => {\n\n    if (!startTime) {\n      setStartTime(currentTime());\n      console.log('time', currentTime());\n    }\n\n    console.log(key)\n    let updatedOutgoingChars = outgoingChars; \n    let updatedIncomingChars = incomingChars; \n\n    //if key pressed matches the current character\n    if (key === currentChar) {\n\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1)); \n      }\n      updatedOutgoingChars += currentChar; \n      setOutgoingChars(updatedOutgoingChars)\n\n      //set the current character to the value of the next incoming character\n      setCurrentChar(incomingChars.charAt(0)); \n\n      /*\n      Since generateWord() method only creates 10 words per call\n      In the instance, the user types too fast, we want to generate more words\n      and append it to the incoming chars. \n      */\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split('').length < 20) {\n        if (sfwMode === true){\n          updatedIncomingChars += ' ' + generateWord();\n          console.log(\"Geneartion - what mode are we in? \", sfwMode)\n          console.log(\"generating good words!!!\")\n        } \n        else if(sfwMode === false) {\n            updatedIncomingChars += ' ' + generateNaughtyWord();\n            console.log(\"Generation - what mode are we in? \", sfwMode)\n            console.log(\"generating BAD words!!\")\n        }\n      }\n      setIncomingChars(updatedIncomingChars);\n      \n      /*\n      if the next character is a empty space, it means the user has successfully\n      typed a full word, increment the wordCount by 1 \n      */\n      if (incomingChars.charAt(0) === ' '){\n        setWordCount(wordCount + 1);\n        const durationInMinutes = (currentTime() - startTime) / 60000.0;\n        console.log('minutes', durationInMinutes);\n        setWpm(((wordCount + 1) / durationInMinutes).toFixed(2));\n      }\n    }\n\n      const updatedTypedChars = typedChars + key;\n      setTypedChars(updatedTypedChars);\n      setAccuracy(\n        ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\n          2,\n        ),\n      );\n  });\n  \n  return (\n    <div className=\"App\">\n      <p className=\"Character\">\n      <h2>Keyboard Warriors</h2>\n\n      <span className=\"Character-out\"> \n        {(leftPadding + outgoingChars).slice(-20)}\n      </span>\n      <span className=\"Character-current\">{currentChar}</span>\n      <span>{incomingChars.substr(0,20)}</span>\n      </p>\n    <h3 className=\"Character\"> \n      WPM: {wpm} | Accuracy: {accuracy}%\n    </h3>\n    <span>\n      <button onClick={changeTypingMode}>FORTNITE Mode</button>\n    </span>\n    {/* <span>\n      <RedoButton onClick={resetApp}/>\n    </span> */}\n    {/* <div> \n      {initialValue}\n    </div> */}\n  </div>\n\n  );\n};\n\nexport default HomePage;","/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/config/configpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/leaderboard/leaderboardpage.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/wordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/useKeyPress.jsx",["84","85"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/utils/time.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/pages/homepage/homepage.styled.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/wordGenerator/badWordGenerator.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/nsfwButton/nsfwButton.component.jsx",[],["86","87"],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/components/redoButton/redoButton.component.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialWordContext.js",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/initialModeContext.jsx",[],"/Users/andrew.b.truong/Development/a-dull-boy-types/src/hooks/nsfwModeContext.jsx",[],{"ruleId":"88","severity":1,"message":"89","line":13,"column":8,"nodeType":"90","messageId":"91","endLine":13,"endColumn":19},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"88","severity":1,"message":"96","line":8,"column":9,"nodeType":"90","messageId":"91","endLine":8,"endColumn":19},{"ruleId":"88","severity":1,"message":"97","line":29,"column":10,"nodeType":"90","messageId":"91","endLine":29,"endColumn":15},{"ruleId":"88","severity":1,"message":"98","line":72,"column":12,"nodeType":"90","messageId":"91","endLine":72,"endColumn":20},{"ruleId":"99","severity":1,"message":"100","line":34,"column":22,"nodeType":"101","endLine":34,"endColumn":26},{"ruleId":"99","severity":1,"message":"102","line":38,"column":24,"nodeType":"101","endLine":38,"endColumn":28},{"ruleId":"92","replacedBy":"103"},{"ruleId":"94","replacedBy":"104"},"no-unused-vars","'Leaderboard' is defined but never used.","Identifier","unusedVar","no-native-reassign",["105"],"no-negated-in-lhs",["106"],"'RedoButton' is defined but never used.","'title' is assigned a value but never used.","'resetApp' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'tabPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'enterPressed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["105"],["106"],"no-global-assign","no-unsafe-negation"]